package main

import (
	"time"
	"net"
	"testing"
)

//
// Implement a mock version of net.Conn for testing
//

type MockConn struct {
	readBytes [][]byte
	writtenBytes []byte

	readError *error
	closeAfterWrites int
	numWrites int
	writtenBytePtr int
}

func (conn MockConn) Read(b []byte) (n int, err error) {
	read := copy(b, conn.readBytes[conn.numWrites])
	conn.numWrites++
	return read, nil
}

func (conn MockConn) Write(b []byte) (n int, err error) {
	written := copy(conn.writtenBytes[conn.writtenBytePtr:], b)
	conn.writtenBytePtr += written
	return written, nil
}

func (conn MockConn) Close() error {
	return nil
}

func (conn MockConn) LocalAddr() net.Addr {
	return &net.IPAddr{net.IPv4(192, 168, 1, 1), ""}
}

func (conn MockConn) RemoteAddr() net.Addr {
	return &net.IPAddr{net.IPv4(192, 168, 1, 1), ""}
}

func (conn MockConn) SetDeadline(t time.Time) error {
	return nil
}

func (conn MockConn) SetReadDeadline(t time.Time) error {
	return nil
}

func (conn MockConn) SetWriteDeadline(t time.Time) error {
	return nil
}

func NewMockConn() *MockConn {
	return &MockConn{readBytes: make([][]byte, 1024, 1024),	writtenBytes: make([]byte, 1024, 1024)}
}

func TestKeyGen(t *testing.T) {
	gen := KeyGen()

	i := gen()
	j := gen()
	k := gen()

	if i != 1 || j != 2 || k != 3 {
		t.Errorf("Incorrect sequence generated by KeyGen")
	}

}

func TestNewWorld(t *testing.T) {
	w := NewWorld()

	if w.players.Len() != 0 {
		t.Errorf("Expected world to exist and have 0 players.")
	}
}

func TestNewRoom(t *testing.T) {
	world := NewWorld()
	hall, err := world.NewRoom("The Hall")
	if hall == nil || err != nil {	
		t.Errorf("Expected to create a new room.")
	}
	if world.rooms.Len() != 1 || !world.rooms.Contains(hall) {
		t.Errorf("Expected room to have been added to the world.")
	}
}

func TestNewPlayer(t *testing.T) {
	world := NewWorld()
	hall,_ := world.NewRoom("The Hall")
	bob,_ := world.NewPlayer("bob", hall)
	if bob.name != "bob" {
		t.Errorf("Expected player name to be bob, but was %s", bob.name)
	}
	if bob.location != hall {
		t.Errorf("Expected player's location to be the hall")
	}
	if world.players.Len() != 1 || !world.players.Contains(bob) {
		t.Errorf("Expected player to have been added to world.")
	}
}

func TestNewPlayerCantReuseNames(t *testing.T) {
	world := NewWorld()
	hall,_ := world.NewRoom("The Hall")
	world.NewPlayer("bob", hall)
	otherBob, err := world.NewPlayer("bob", hall)
	if otherBob != nil || err == nil {
		t.Errorf("Should not have been able to create duplicate user")
	}
}

func TestTell(t *testing.T) {
	conn := NewMockConn()
	client := &Client{conn: conn}
	client.tell("Hello, world!\n")

	actual := string(conn.writtenBytes[0:15])
	if actual != "Hello, world!\n\u0000" {
		t.Errorf("`tell` did not write bytes correctly: '%s'", actual)
	}
}

func TestNewExit(t *testing.T) {
	world := NewWorld()
	hall,_ := world.NewRoom("The Hall")
	den,_ := world.NewRoom("The Den")

	_, err1 := hall.NewExit("east", den)
	_, err2 := den.NewExit("west", hall)

	if err1 != nil || err2 != nil {
		t.Errorf("Error while creating exits.")
	}
}

func TestNewExitFailsWhenCreatingDuplicateExits(t *testing.T) {
	world := NewWorld()
	hall,_ := world.NewRoom("The Hall")
	den,_ := world.NewRoom("The Den")

	hall.NewExit("east", den)
	exit, err := hall.NewExit("east", hall)

	if exit != nil || err == nil {
		t.Errorf("Creating exit should have failed.")
	}
}
